---
- hosts: local
  vars:
    app_dir: ansible_taskrunner
    lib_dir: ${app_dir}/lib
    plugins_dir: ${app_dir}/plugins
    workdir: ${PWD}
    help:
      message: |
        Task Runner for the Task Runner!
      examples:
    inventory: |
      [local]
      localhost      
    required_parameters:
      -b: build
    optional_parameters:
      -bp|--build-and-push: deployment_host_and_path
      -x|--replace-exe: REPLACE_EXE
    functions:
      build:
        shell: bash
        source: |-
          set -o errexit
          cd ${app_dir}
          for pyver in py2 py3;do
            if ! test -d lib/${pyver};then 
              mkdir lib/${pyver}
              source activate $pyver
              pip install -t lib/${pyver} -r ${workdir}/requirments.txt
            fi
          done
          __version=$(egrep '.*__version__ =' __init__.py | cut -d\  -f3 | tr -d "'")
          echo "Version is ${__version}"
          __release_dir=../release/${__version}
          lint_result=$(python cli.py --help)
          echo "Initial lint OK, proceeding with build"
          if [[ "$OSTYPE" =~ .*msys.* ]];then 
            echo "OSType is Windows, nesting libdir ..."
            if test -d windows;then 
              rm -rf windows
            else
              mkdir windows
            fi
            cp -r lib plugins windows
            echo "Creating zip-app"
            make-zipapp -f cli.py -X __pycache__ -x .pyc -d windows
            if test -d windows;then rm -rf windows;fi
          else
            echo "OSType is most likely POSIX native"
            echo "Creating zip-app"
            make-zipapp -f cli.py -X __pycache__ -x .pyc
          fi
          mv cli tasks
          lint_result=$(tasks --help)
          echo "Initial lint OK, proceeding with release"
          if ! test -d ${__release_dir};then mkdir -p ${__release_dir};fi
          mv -f tasks ${__release_dir}
          if [[ -n $REPLACE_EXE ]];then
            echo "Replacing current executable: $(which tasks)"
            yes | cp ${__release_dir}/tasks $(which tasks)
          fi
          if [[ -n $deployment_host_and_path ]];then
            echo "Pushing up"
            scp_result=$(scp ${__release_dir}/tasks ${deployment_host_and_path})
          fi
  tasks:
    - debug: 
        msg: Done!
...